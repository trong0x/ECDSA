import sys
import os
sys.path.append('..')

from core.wallet import create_wallet, get_wallet_info
from core.transaction import create_transaction, sign_transaction
from core.verification import full_verification_flow, verify_signature, check_balance
from core.fraud_detection import check_fraud, check_double_spending

def test_valid_transaction():
    """Test giao d·ªãch h·ª£p l·ªá"""
    print("üß™ TEST 1: Giao d·ªãch h·ª£p l·ªá...")
    
    try:
        # T·∫°o v√≠ test
        alice = create_wallet("Alice_Valid")
        bob = create_wallet("Bob_Valid")
        
        # T·∫°o v√† k√Ω giao d·ªãch
        transaction = create_transaction("Alice_Valid", "Bob_Valid", 100000)
        signed_tx = sign_transaction(transaction, "Alice_Valid")
        
        # Ch·∫°y full verification
        result = full_verification_flow(signed_tx["id"])
        
        # Ki·ªÉm tra k·∫øt qu·∫£
        assert result["valid"] == True
        assert result["signature_valid"] == True
        assert result["balance_valid"] == True
        assert result["fraud_check"] == True
        
        print("   ‚úÖ Giao d·ªãch h·ª£p l·ªá - PASS")
        print(f"   ‚úÖ Ch·ªØ k√Ω: {'OK' if result['signature_valid'] else 'FAIL'}")
        print(f"   ‚úÖ S·ªë d∆∞: {'OK' if result['balance_valid'] else 'FAIL'}")
        print(f"   ‚úÖ B·∫£o m·∫≠t: {'OK' if result['fraud_check'] else 'FAIL'}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå L·ªói test giao d·ªãch h·ª£p l·ªá: {e}")
        return False

def test_invalid_signature():
    """Test giao d·ªãch ch·ªØ k√Ω sai"""
    print("\nüß™ TEST 2: Giao d·ªãch ch·ªØ k√Ω sai...")
    
    try:
        # T·∫°o v√≠ test
        alice = create_wallet("Alice_BadSig")
        bob = create_wallet("Bob_BadSig")
        
        # T·∫°o giao d·ªãch
        transaction = create_transaction("Alice_BadSig", "Bob_BadSig", 50000)
        signed_tx = sign_transaction(transaction, "Alice_BadSig")
        
        # L√†m h·ªèng ch·ªØ k√Ω
        signed_tx["signature"] = "fake_signature_abcdef123456"
        
        # Test verify signature
        valid, message = verify_signature(signed_tx)
        
        assert valid == False
        print("   ‚úÖ Ph√°t hi·ªán ch·ªØ k√Ω sai - PASS")
        print(f"   ‚úÖ L√Ω do: {message}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå L·ªói test ch·ªØ k√Ω sai: {e}")
        return False

def test_insufficient_balance():
    """Test giao d·ªãch kh√¥ng ƒë·ªß ti·ªÅn"""
    print("\nüß™ TEST 3: Giao d·ªãch kh√¥ng ƒë·ªß ti·ªÅn...")
    
    try:
        # T·∫°o v√≠ test
        alice = create_wallet("Alice_NoMoney")
        bob = create_wallet("Bob_NoMoney")
        
        # T·∫°o giao d·ªãch v·ªõi s·ªë ti·ªÅn l·ªõn h∆°n s·ªë d∆∞
        alice_wallet = get_wallet_info("Alice_NoMoney")
        big_amount = alice_wallet["balance"] + 500000  # V∆∞·ª£t qu√° s·ªë d∆∞
        
        # Test check balance
        balance_ok, balance_msg = check_balance("Alice_NoMoney", big_amount)
        
        assert balance_ok == False
        print("   ‚úÖ Ph√°t hi·ªán kh√¥ng ƒë·ªß ti·ªÅn - PASS")
        print(f"   ‚úÖ L√Ω do: {balance_msg}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå L·ªói test kh√¥ng ƒë·ªß ti·ªÅn: {e}")
        return False

def test_double_spending_detection():
    """Test ph√°t hi·ªán double spending"""
    print("\nüß™ TEST 4: Ph√°t hi·ªán double spending...")
    
    try:
        # T·∫°o v√≠ test
        alice = create_wallet("Alice_Double")
        bob = create_wallet("Bob_Double")
        
        # T·∫°o giao d·ªãch ƒë·∫ßu ti√™n
        tx1 = create_transaction("Alice_Double", "Bob_Double", 100000)
        signed_tx1 = sign_transaction(tx1, "Alice_Double")
        
        # T·∫°o giao d·ªãch th·ª© hai gi·ªëng h·ªát (double spending)
        tx2 = create_transaction("Alice_Double", "Bob_Double", 100000)
        signed_tx2 = sign_transaction(tx2, "Alice_Double")
        
        # Test ph√°t hi·ªán double spending
        fraud_detected, fraud_msg = check_double_spending(signed_tx2)
        
        # Should detect fraud (c√≥ th·ªÉ pass ho·∫∑c fail t√πy timing)
        print(f"   ‚úÖ K·∫øt qu·∫£ double spending check: {fraud_msg}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå L·ªói test double spending: {e}")
        return False

def test_fraud_detection():
    """Test t·ªïng h·ª£p ph√°t hi·ªán fraud"""
    print("\nüß™ TEST 5: T·ªïng h·ª£p ph√°t hi·ªán fraud...")
    
    try:
        # T·∫°o v√≠ test
        alice = create_wallet("Alice_Fraud")
        bob = create_wallet("Bob_Fraud")
        
        # T·∫°o giao d·ªãch b√¨nh th∆∞·ªùng
        transaction = create_transaction("Alice_Fraud", "Bob_Fraud", 75000)
        signed_tx = sign_transaction(transaction, "Alice_Fraud")
        
        # Test fraud check
        fraud_clean, fraud_msg = check_fraud(signed_tx)
        
        print(f"   ‚úÖ K·∫øt qu·∫£ fraud check: {fraud_msg}")
        print(f"   ‚úÖ Status: {'CLEAN' if fraud_clean else 'SUSPICIOUS'}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå L·ªói test fraud detection: {e}")
        return False

def test_full_verification_flow():
    """Test flow x√°c th·ª±c ho√†n ch·ªânh"""
    print("\nüß™ TEST 6: Flow x√°c th·ª±c ho√†n ch·ªânh...")
    
    try:
        # T·∫°o v√≠ test
        alice = create_wallet("Alice_Full")
        bob = create_wallet("Bob_Full")
        
        # T·∫°o v√† k√Ω giao d·ªãch
        transaction = create_transaction("Alice_Full", "Bob_Full", 200000)
        signed_tx = sign_transaction(transaction, "Alice_Full")
        
        print(f"   üîç ƒêang x√°c th·ª±c giao d·ªãch: {signed_tx['id']}")
        
        # Ch·∫°y full verification flow
        result = full_verification_flow(signed_tx["id"])
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
        print(f"   üìä K·∫øt qu·∫£ x√°c th·ª±c:")
        print(f"      - T·ªïng th·ªÉ: {'‚úÖ H·ª¢P L·ªÜ' if result['valid'] else '‚ùå KH√îNG H·ª¢P L·ªÜ'}")
        print(f"      - Ch·ªØ k√Ω: {'‚úÖ ƒê√∫ng' if result['signature_valid'] else '‚ùå Sai'}")
        print(f"      - S·ªë d∆∞: {'‚úÖ ƒê·ªß' if result['balance_valid'] else '‚ùå Kh√¥ng ƒë·ªß'}")
        print(f"      - B·∫£o m·∫≠t: {'‚úÖ An to√†n' if result['fraud_check'] else '‚ùå Nghi ng·ªù'}")
        print(f"      - Chi ti·∫øt: {result['message']}")
        
        return result["valid"]
        
    except Exception as e:
        print(f"   ‚ùå L·ªói test full verification: {e}")
        return False

def run_all_verification_tests():
    """Ch·∫°y t·∫•t c·∫£ test x√°c th·ª±c"""
    print("=" * 70)
    print("üîç CH·∫†Y T·∫§T C·∫¢ TEST X√ÅC TH·ª∞C GIAO D·ªäCH")
    print("=" * 70)
    
    tests = [
        ("Giao d·ªãch h·ª£p l·ªá", test_valid_transaction),
        ("Ch·ªØ k√Ω sai", test_invalid_signature),
        ("Kh√¥ng ƒë·ªß ti·ªÅn", test_insufficient_balance),
        ("Double spending", test_double_spending_detection),
        ("Fraud detection", test_fraud_detection),
        ("Full verification", test_full_verification_flow)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            if result:
                passed += 1
                print(f"‚úÖ {test_name}: PASSED")
            else:
                print(f"‚ùå {test_name}: FAILED")
        except Exception as e:
            print(f"üí• {test_name}: ERROR - {e}")
    
    print("\n" + "=" * 70)
    print(f"üìä T·ªîNG K·∫æT: {passed}/{total} TESTS PASSED")
    
    if passed == total:
        print("üéâ T·∫§T C·∫¢ TEST X√ÅC TH·ª∞C ƒê·ªÄU PASS!")
        print("üõ°Ô∏è  H·ªá th·ªëng b·∫£o m·∫≠t ho·∫°t ƒë·ªông t·ªët!")
    else:
        print(f"‚ö†Ô∏è  C√ì {total - passed} TEST FAILED")
        print("üîß C·∫ßn ki·ªÉm tra l·∫°i code!")
    
    print("=" * 70)
    
    return passed == total

if __name__ == "__main__":
    run_all_verification_tests()