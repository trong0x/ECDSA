# main.py
import uuid
import time
import traceback
from getpass import getpass
from core.wallet import create_wallet, get_wallet_info, update_balance
from core.transaction import sign_transaction, load_transactions

def menu():
    print("1. T·∫°o v√≠ m·ªõi")
    print("2. Xem th√¥ng tin v√≠")
    print("3. T·∫°o giao d·ªãch")
    print("4. Danh s√°ch giao d·ªãch")
    print("5. Xem chi ti·∫øt giao d·ªãch")
    print("6. Tho√°t")
    return input("Ch·ªçn ch·ª©c nƒÉng: ")

def create_wallet_flow():
    name = input("Nh·∫≠p t√™n v√≠: ")
    passphrase = getpass("Nh·∫≠p passphrase ƒë·ªÉ b·∫£o v·ªá private key: ")
    wallet = create_wallet(name, passphrase)
    print(f"‚úÖ V√≠ '{name}' ƒë√£ t·∫°o th√†nh c√¥ng!")
    print(json_pretty(wallet))

def show_wallet_info():
    name = input("Nh·∫≠p t√™n v√≠: ")
    wallet = get_wallet_info(name)
    if not wallet:
        print("‚ùå Kh√¥ng t√¨m th·∫•y v√≠")
        return
    safe_wallet = wallet.copy()
    safe_wallet.pop("encrypted_private_key", None)
    safe_wallet.pop("salt", None)
    print(json_pretty(safe_wallet))

def create_transaction_flow():

    amount = int(input("S·ªë ti·ªÅn: "))
    if amount <= 0:
       print("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0")
       return

    from_user = input("Ng∆∞·ªùi g·ª≠i (t√™n v√≠): ")
    to_user = input("Ng∆∞·ªùi nh·∫≠n (t√™n v√≠): ")
    amount = int(input("S·ªë ti·ªÅn: "))

    from_wallet = get_wallet_info(from_user)
    to_wallet = get_wallet_info(to_user)

    if not from_wallet or not to_wallet:
        print("‚ùå V√≠ kh√¥ng t·ªìn t·∫°i")
        return

    if from_wallet["balance"] < amount:
        print("‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß")
        return

    tx = {
        "id": str(uuid.uuid4()),
        "from": from_user,
        "to": to_user,
        "amount": amount,
        "timestamp": time.time(),  # k√Ω v·∫´n ch·∫•p nh·∫≠n s·ªë; l∆∞u file d√πng ISO trong create_transaction() flow
        "from_address": from_wallet["address"],
        "to_address": to_wallet["address"],
        "status": "created"
    }

    passphrase = getpass("Nh·∫≠p passphrase c·ªßa v√≠ g·ª≠i ƒë·ªÉ k√Ω giao d·ªãch: ")
    try:
        signed_tx = sign_transaction(tx, from_user, passphrase)
        print("‚úÖ Giao d·ªãch ƒë√£ k√Ω th√†nh c√¥ng:")
        print(json_pretty(signed_tx))

        update_balance(from_user, from_wallet["balance"] - amount)
        update_balance(to_user, to_wallet["balance"] + amount)

    except Exception as e:
        print("‚ùå L·ªói khi k√Ω giao d·ªãch:", str(e))
        traceback.print_exc()

def show_transactions():
    """Danh s√°ch giao d·ªãch (list)"""
    txs = load_transactions()
    if not txs:
        print("Ch∆∞a c√≥ giao d·ªãch n√†o")
        return

    print("\n=== Danh s√°ch giao d·ªãch ===")
    # txs l√† list
    for tx in txs:
        print(f"- ID: {tx.get('id')} | {tx.get('from')} -> {tx.get('to')} | {tx.get('amount')} | {tx.get('status', 'unknown')}")

def show_transaction_detail():
    """Hi·ªÉn th·ªã chi ti·∫øt m·ªôt giao d·ªãch"""
    tx_id = input("Nh·∫≠p Transaction ID: ")
    txs = load_transactions()
    tx = None
    for t in txs:
        if t.get("id") == tx_id:
            tx = t
            break

    if not tx:
        print("‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch")
        return

    print("\n=== Chi ti·∫øt giao d·ªãch ===")
    print(f"üîπ ID: {tx.get('id')}")
    print(f"üîπ Ng∆∞·ªùi g·ª≠i: {tx.get('from')} ({tx.get('from_address')})")
    print(f"üîπ Ng∆∞·ªùi nh·∫≠n: {tx.get('to')} ({tx.get('to_address')})")
    print(f"üîπ S·ªë ti·ªÅn: {tx.get('amount')}")
    print(f"üîπ Th·ªùi gian: {tx.get('timestamp')}")
    print(f"üîπ Tr·∫°ng th√°i: {tx.get('status', 'unknown')}")
    if tx.get("signature"):
        print(f"üîπ Ch·ªØ k√Ω: {tx.get('signature')}")

def json_pretty(obj):
    import json
    return json.dumps(obj, indent=2, ensure_ascii=False)

if __name__ == "__main__":
    while True:
        choice = menu()
        if choice == "1":
            create_wallet_flow()
        elif choice == "2":
            show_wallet_info()
        elif choice == "3":
            create_transaction_flow()
        elif choice == "4":
            show_transactions()
        elif choice == "5":
            show_transaction_detail()
        elif choice == "6":
            print("Tho√°t ch∆∞∆°ng tr√¨nh...")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
