import json
import os
from datetime import datetime

def check_double_spending(transaction):
    """Ki·ªÉm tra chi ti√™u k√©p"""
    try:
        transactions_file = "data/transactions.json"
        
        if not os.path.exists(transactions_file):
            return True, "Kh√¥ng c√≥ giao d·ªãch tr∆∞·ªõc ƒë√≥ ƒë·ªÉ so s√°nh"
        
        # ƒê·ªçc t·∫•t c·∫£ giao d·ªãch
        with open(transactions_file, 'r', encoding='utf-8') as f:
            all_transactions = json.load(f)
        
        current_tx = transaction
        current_from = current_tx["from"]
        current_amount = current_tx["amount"]
        current_id = current_tx["id"]
        
        # Ki·ªÉm tra giao d·ªãch tr√πng l·∫∑p
        for tx in all_transactions:
            # B·ªè qua giao d·ªãch hi·ªán t·∫°i
            if tx["id"] == current_id:
                continue
                
            # Ki·ªÉm tra c√πng ng∆∞·ªùi g·ª≠i, c√πng s·ªë ti·ªÅn, trong th·ªùi gian ng·∫Øn
            if (tx["from"] == current_from and 
                tx["amount"] == current_amount and
                tx.get("status") in ["verified", "signed"]):
                
                # Ki·ªÉm tra th·ªùi gian (trong v√≤ng 1 ph√∫t)
                tx_time = datetime.fromisoformat(tx["timestamp"])
                current_time = datetime.fromisoformat(current_tx["timestamp"])
                
                if abs((current_time - tx_time).total_seconds()) < 60:
                    return False, f"Ph√°t hi·ªán double spending: Giao d·ªãch t∆∞∆°ng t·ª± {tx['id']} ƒë√£ t·ªìn t·∫°i"
        
        return True, "Kh√¥ng ph√°t hi·ªán double spending"
        
    except Exception as e:
        return False, f"L·ªói ki·ªÉm tra double spending: {str(e)}"

def check_replay_attack(transaction):
    """Ki·ªÉm tra t·∫•n c√¥ng ph√°t l·∫°i"""
    try:
        # 1. Check timestamp c√≥ qu√° c≈© kh√¥ng (h∆°n 10 ph√∫t)
        tx_time = datetime.fromisoformat(transaction["timestamp"])
        current_time = datetime.now()
        time_diff = (current_time - tx_time).total_seconds()
        
        if time_diff > 600:  # 10 ph√∫t
            return False, f"Giao d·ªãch qu√° c≈© ({time_diff/60:.1f} ph√∫t)"
        
        # 2. Check timestamp c√≥ trong t∆∞∆°ng lai kh√¥ng
        if time_diff < -60:  # Cho ph√©p sai l·ªách 1 ph√∫t
            return False, "Giao d·ªãch c√≥ timestamp trong t∆∞∆°ng lai"
        
        # 3. Check transaction ID c√≥ tr√πng kh√¥ng (nh∆∞ng cho ph√©p giao d·ªãch ƒëang ƒë∆∞·ª£c x√°c th·ª±c)
        transactions_file = "data/transactions.json"
        
        if os.path.exists(transactions_file):
            with open(transactions_file, 'r', encoding='utf-8') as f:
                all_transactions = json.load(f)
            
            # ƒê·∫øm s·ªë l·∫ßn transaction ID xu·∫•t hi·ªán
            count = 0
            for tx in all_transactions:
                if tx["id"] == transaction["id"]:
                    count += 1
            
            # N·∫øu xu·∫•t hi·ªán >= 2 l·∫ßn th√¨ m·ªõi coi l√† replay
            if count >= 2:
                return False, f"Transaction ID {transaction['id']} b·ªã replay (xu·∫•t hi·ªán {count} l·∫ßn)"
        
        return True, "Kh√¥ng ph√°t hi·ªán replay attack"
        
    except Exception as e:
        return False, f"L·ªói ki·ªÉm tra replay attack: {str(e)}"

def check_signature_tampering(transaction):
    """Ki·ªÉm tra ch·ªØ k√Ω c√≥ b·ªã thay ƒë·ªïi kh√¥ng"""
    try:
        # Ki·ªÉm tra signature c√≥ format hex h·ª£p l·ªá kh√¥ng
        signature = transaction.get("signature", "")
        
        if not signature:
            return False, "Giao d·ªãch kh√¥ng c√≥ ch·ªØ k√Ω"
        
        # Ki·ªÉm tra ƒë·ªô d√†i signature (ECDSA signature th∆∞·ªùng ~64 bytes = 128 hex chars)
        if len(signature) < 64 or len(signature) > 140:
            return False, f"Ch·ªØ k√Ω c√≥ ƒë·ªô d√†i b·∫•t th∆∞·ªùng: {len(signature)} characters"
        
        # Ki·ªÉm tra c√≥ ph·∫£i hex h·ª£p l·ªá kh√¥ng
        try:
            bytes.fromhex(signature)
        except ValueError:
            return False, "Ch·ªØ k√Ω kh√¥ng ph·∫£i hex h·ª£p l·ªá"
        
        return True, "Ch·ªØ k√Ω c√≥ format h·ª£p l·ªá"
        
    except Exception as e:
        return False, f"L·ªói ki·ªÉm tra signature tampering: {str(e)}"

def check_amount_manipulation(transaction):
    """Ki·ªÉm tra s·ªë ti·ªÅn c√≥ b·ªã thao t√∫ng kh√¥ng"""
    try:
        amount = transaction.get("amount", 0)
        
        # C·∫£i thi·ªán th√¥ng b√°o l·ªói cho s·ªë √¢m ho·∫∑c 0
        if amount < 0:
            return False, "S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0 (kh√¥ng ch·∫•p nh·∫≠n s·ªë √¢m ho·∫∑c 0)"
        
        if amount > 100000000:  # 100 tri·ªáu VND
            return False, "S·ªë ti·ªÅn qu√° l·ªõn (>100 tri·ªáu VND)"
        
        # Ki·ªÉm tra c√≥ ph·∫£i s·ªë nguy√™n kh√¥ng
        if not isinstance(amount, int):
            return False, "S·ªë ti·ªÅn ph·∫£i l√† s·ªë nguy√™n"
        
        return True, "S·ªë ti·ªÅn h·ª£p l√Ω"
        
    except Exception as e:
        return False, f"L·ªói ki·ªÉm tra amount manipulation: {str(e)}"

def check_fraud(transaction):
    """T·ªïng h·ª£p ki·ªÉm tra gi·∫£ m·∫°o"""
    try:
        print(f"üîí Ki·ªÉm tra b·∫£o m·∫≠t cho giao d·ªãch {transaction['id']}...")
        
        # 1. Ki·ªÉm tra double spending
        ds_check, ds_msg = check_double_spending(transaction)
        if not ds_check:
            return False, f"Double Spending: {ds_msg}"
        
        # 2. Ki·ªÉm tra replay attack
        ra_check, ra_msg = check_replay_attack(transaction)
        if not ra_check:
            return False, f"Replay Attack: {ra_msg}"
        
        # 3. Ki·ªÉm tra signature tampering
        st_check, st_msg = check_signature_tampering(transaction)
        if not st_check:
            return False, f"Signature Tampering: {st_msg}"
        
        # 4. Ki·ªÉm tra amount manipulation
        am_check, am_msg = check_amount_manipulation(transaction)
        if not am_check:
            return False, f"Amount Manipulation: {am_msg}"
        
        # T·∫•t c·∫£ ki·ªÉm tra ƒë·ªÅu pass
        return True, "T·∫•t c·∫£ ki·ªÉm tra b·∫£o m·∫≠t ƒë·ªÅu PASS"
        
    except Exception as e:
        return False, f"L·ªói ki·ªÉm tra fraud: {str(e)}"

def get_fraud_statistics():
    """Th·ªëng k√™ c√°c lo·∫°i t·∫•n c√¥ng ƒë√£ ph√°t hi·ªán"""
    try:
        transactions_file = "data/transactions.json"
        
        if not os.path.exists(transactions_file):
            return {
                "total_transactions": 0,
                "verified_transactions": 0,
                "rejected_transactions": 0,
                "fraud_attempts": 0
            }
        
        with open(transactions_file, 'r', encoding='utf-8') as f:
            all_transactions = json.load(f)
        
        total = len(all_transactions)
        verified = len([tx for tx in all_transactions if tx.get("status") == "verified"])
        rejected = len([tx for tx in all_transactions if tx.get("status") == "rejected"])
        fraud_attempts = rejected  # Gi·∫£ ƒë·ªãnh rejected = fraud attempts
        
        return {
            "total_transactions": total,
            "verified_transactions": verified,
            "rejected_transactions": rejected,
            "fraud_attempts": fraud_attempts,
            "success_rate": f"{(verified/total*100):.1f}%" if total > 0 else "0%"
        }
        
    except Exception as e:
        return {"error": f"L·ªói l·∫•y th·ªëng k√™: {str(e)}"}